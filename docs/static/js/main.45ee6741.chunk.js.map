{"version":3,"sources":["components/AddCategories.js","helpers/getGifs.js","components/GridGifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategories","setCategories","useState","imputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAMrC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCPHO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECAd,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAbAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAAEpB,IAEEqB,EDhBmBM,CAAc3B,GAAhCO,EAL8B,EAK9BA,KAAMa,EALwB,EAKxBA,QAId,OAHAQ,QAAQC,IAAItB,GACZqB,QAAQC,IAAIT,GAGR,kBAAC,WAAD,KACI,gCAAOpB,EAAP,KAEEoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAEHT,EAAKE,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACIoB,IAAMpB,EAAIC,IACLD,UEpBxBqB,EAAe,WAAkC,wDAAC,IAAD,EAEtB7C,mBAAS,CAAC,cAFY,mBAEnD8C,EAFmD,KAEvC/C,EAFuC,KAU1D,OACI,kBAAC,WAAD,KACI,8CACA,kBAAC,EAAD,CAAgBA,cAAiBA,IACjC,6BACA,4BAGQ+C,EAAWvB,KAAK,SAAAT,GAAS,OAEjB,kBAAC,EAAD,CACI8B,IAAO9B,EACPA,UAAWA,U,MClB3CiC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.45ee6741.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react'\r\n\r\nexport const AddCategories = ( {setCategories} ) => {\r\n\r\n    const [imputValue, setImputValue] = useState('');\r\n\r\n    const handleImputChange = (e)=>{\r\n        //console.log(e.target.value);\r\n        setImputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        // console.log(e);\r\n        if(imputValue.trim().length >1 ){\r\n            setCategories( cat => [imputValue, ...cat ] );\r\n            setImputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={imputValue}\r\n                onChange={ handleImputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategories.propTypes = {\r\n    setCategories: PropTypes.func.isRequired \r\n}","\r\nexport const getGifs = async( categoria ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=10&api_key=l0PRqfVk06JHM7Qe2LevOQ8OyTnsJxSv`;\r\n    \r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    //setImages(gifs);\r\n    //console.log(images);\r\n\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GridGifItem = ( {id, title, url} ) => {\r\n    \r\n    //img son los props recibidos por parametro....\r\n    //console.log(img);\r\n    //console.log(url);\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GridGifItem } from './GridGifItem';\r\n\r\nexport const GifGrid = ( {categoria} ) => {\r\n\r\n    //const [count, setCount] = useState(0);\r\n    //const [images, setImages] = useState([]);\r\n\r\n    const { data, loading } = useFetchGifs( categoria );\r\n    console.log(data);\r\n    console.log(loading);\r\n\r\n    return (\r\n        <Fragment> \r\n            <h3> { categoria } </h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        data.map( img => (\r\n                            <GridGifItem \r\n                                key= {img.id}\r\n                                { ...img }\r\n                            />\r\n                            //en lugar de mandar el img puedoo usar el spred del array img ... img={ img }\r\n                        ))\r\n                    }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport  { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( categoria ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect( ()=> {\r\n        getGifs( categoria )\r\n            .then( imgs =>{\r\n\r\n                setTimeout( ()=> {\r\n                    setState({\r\n                        data: imgs, \r\n                        loading: false    \r\n                    });    \r\n                }, 3000)\r\n            }) \r\n    }, [ categoria ]) \r\n\r\n    return state;\r\n};\r\n\r\n","import React, { Fragment, useState } from 'react';\r\nimport { AddCategories } from './components/AddCategories';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ( titulo = 'GifExpoertApp ...' )=>{\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n/*    const handleAdd = () =>{\r\n        //setCategories( [...cat, 'Otro nombre'] );\r\n        setCategories( cat => [...cat, 'Otro nombre'] );\r\n    } */\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <h1> GifExpertApp </h1>\r\n            <AddCategories  setCategories ={ setCategories } />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    //la funcion flecha como devuleve un solo renglon no es necesario el return\r\n                    categories.map( categoria => \r\n                        (\r\n                            <GifGrid \r\n                                key = {categoria}\r\n                                categoria={categoria} \r\n                            />\r\n                        )\r\n                        //   <li key = {categoria}> {categoria} </li>\r\n                    )\r\n                    /*la forma tradicional\r\n                    categories.map( categoria =>{return <li key = {categoria}> {categoria} </li>})*/\r\n\r\n                }\r\n            </ol>\r\n\r\n\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}